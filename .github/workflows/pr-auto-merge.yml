name: PR auto merge & notify security update
on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

jobs:
  label:
    runs-on: ubuntu-20.04
    permissions: write-all

    steps:
      - name: Check out code
        id: checkout
        uses: actions/checkout@v2
        
      - name: check pull requests
        id: pr
        run: |
          #depfuラベルが付いたPRだけを抽出しつつ、必要な情報を取得する
          query=`cat << EOS
          map(select(.labels[] | any(.;.name == "depfu"))) |
          map(
            {
              url: .url,
              branch: .headRefName,
              base: .baseRefName,
              title: .title,
              security: any(.labels[]; .name == "security"),
              status: (.statusCheckRollup[] | select(. | .name == "frontend test"))
            }
          )
          EOS
          `
          targets=$(gh pr list --json labels,url,title,baseRefName,headRefName,statusCheckRollup --jq "${query}")
          echo "targets:${targets}"
          echo "start auto merge->>>>"
          # auto merge
          IFS=$'\n';for b in $(echo $targets | jq -r 'map(. | select(. | (.security|not) and .status.conclusion == "SUCCESS")) | .[].branch' ); do
            gh pr merge ${b} --merge
          done

          echo "start change base->>>>"
          # change base(security)
          IFS=$'\n';for b in $(echo $targets | jq -r 'map(. | select(. | .security)) | .[].branch' ); do
            gh pr edit ${b} --base master
          done

          echo "start notification(security)->>>>"
          # slack notification(security)
          slack_security=$(echo $targets | jq 'map(. | select(. | .security)) | map({ title: .title, value: .url})' | sed -r 's/"(title|value)"/\1/g')
          echo "start notification(ci failed)->>>>"
          # slack notification(ci failed)
          slack_ci_failed=$(echo $targets | jq 'map(. | select(. | .status.conclusion == "FAILED")) | map({ title: .title, value: .url})' | sed -r 's/"(title|value)"/\1/g')
          echo "slack_security::${slack_security}"
          echo "slack_ci_failed::${slack_ci_failed}"
          echo "::set-output name=slack_security::${slack_security}"
          echo "::set-output name=slack_ci_failed::${slack_ci_failed}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: check pull requests
        id: debug
        run: |
          echo "slack_security------------------------"
          echo "${{ steps.pr.outputs.slack_security }}"
          echo "slack_ci_failed-----------------------"
          echo "${{ steps.pr.outputs.slack_ci_failed }}"

      - name: notify security update
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              username: 'depfu',
              channel: 'dev-notifications',
              icon_emoji: ':rotating_light:',
              attachments: [{
                color: 'danger',
                title: 'SECURITY UPDATE',
                text: 'セキュリティアップデートが作成されました',
                fields: ${{ steps.pr.outputs.slack_security }}
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV_STREAM }}

      - name: notify ci failed
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              username: 'depfu',
              channel: 'dev-notifications',
              icon_emoji: ':rotating_light:',
              attachments: [{
                color: 'danger',
                title: 'CI FAILED',
                text: 'CIが転んでます',
                fields: ${{ steps.pr.outputs.slack_ci_failed }}
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV_STREAM }}

